{"version":3,"sources":["components/chart/LineChart.js","components/chart/BarChart.js","service/DataService.js","components/names-stats/NamesStats.js","App.js","serviceWorker.js","index.js"],"names":["chart","dataGovURL","mapResponseToData","response","req","name","data","map","attributes","nameCol","count","countCol","filter","toUpperCase","length","LineChart","props","myChartRef","useRef","useEffect","destroy","Chart","current","type","labels","datasets","options","title","display","text","responsive","maintainAspectRatio","className","ref","BarChart","legend","colorList","NamesStats","start","end","useState","loadingYears","setLoadingYears","loadingVoivodeship","setLoadingVoivodeship","Array","from","v","k","yearRanges","inputName","setInputName","gender","setGender","lineChartData","setLineChartData","borderColor","backgroundColor","barChartData","setBarChartData","addName","newName","i","color","Math","floor","random","toString","nameQuery","genderQuery","axios","get","headers","then","year","getCountForYears2000To2019","trim","yearsData","createYearsData","catch","voivodeshipNumCol","voivodeshipCol","query","womanUrl","manUrl","getCountFor2019InMalopolska","barChartLabels","barChartDataset","stats","label","extractCountData","fill","extractedStat","find","stat","l","InputGroup","FormControl","value","onChange","event","target","placeholder","as","Button","onClick","disabled","Spinner","animation","size","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.dd6ad82e.chunk.js","sourcesContent":["import React, {useEffect, useRef} from 'react';\r\nimport Chart from \"chart.js\";\r\nimport \"./Chart.css\"\r\n\r\nlet chart;\r\n\r\nconst LineChart = props => {\r\n    const myChartRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (typeof chart !== \"undefined\") chart.destroy();\r\n        chart = new Chart(myChartRef.current, {\r\n            type: \"line\",\r\n            data: {\r\n                labels: props.data.labels,\r\n                datasets: props.data.datasets\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: true,\r\n                    text: props.title\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false\r\n            }\r\n        });\r\n    }, [props.title, props.data, props.data.datasets]);\r\n\r\n\r\n    return (\r\n        <div className={'Name-Chart'}>\r\n            <canvas ref={myChartRef} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineChart;","import React, {useEffect, useRef} from 'react';\r\nimport Chart from \"chart.js\";\r\nimport \"./Chart.css\"\r\n\r\n\r\nlet chart;\r\n\r\nconst BarChart = props => {\r\n    const myChartRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (typeof chart !== \"undefined\") chart.destroy();\r\n        chart = new Chart(myChartRef.current, {\r\n            type: \"bar\",\r\n            data: {\r\n                labels: props.data.labels,\r\n                datasets: props.data.datasets\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: true,\r\n                    text: props.title\r\n                },\r\n                legend: {\r\n                    display: false\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false\r\n            }\r\n        });\r\n    }, [props.title, props.data, props.data.datasets]);\r\n\r\n\r\n    return (\r\n        <div className={'Name-Chart'}>\r\n            <canvas ref={myChartRef} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BarChart;","import axios from \"axios\";\r\n\r\nconst dataGovURL = 'https://cors-anywhere.herokuapp.com/https://api.dane.gov.pl';\r\n\r\n// Imiona nadane dzieciom w Polsce w latach 2000-2019 - imię pierwsze\r\nexport const getCountForYears2000To2019 = (name, gender) => {\r\n    const req = {\r\n        resourcesId: 21457,\r\n        nameCol: 'col2',\r\n        yearCol: 'col1',\r\n        countCol: 'col3',\r\n        genderCol: 'col4'\r\n    }\r\n    const headers = {\r\n        'X-API-VERSION': '1.4',\r\n        'Content-Type': 'application/json'\r\n    };\r\n\r\n    let nameQuery = `${req.nameCol}:\"${name.toUpperCase()}\"`;\r\n    let genderQuery = `${req.genderCol}:\"${gender.toUpperCase()}\"`;\r\n\r\n    return axios.get(`${dataGovURL}/resources/${req.resourcesId}/data?page=1&per_page=100&q=${nameQuery} AND ${genderQuery}&sort=col1`, {headers})\r\n        .then(response =>\r\n            response.data.data.map(data => {\r\n                return {\r\n                    name: data.attributes[req.nameCol],\r\n                    year: data.attributes[req.yearCol],\r\n                    count: data.attributes[req.countCol]\r\n                }\r\n            })\r\n                .filter(data => data.name === name.toUpperCase()));\r\n}\r\n\r\n// Imiona żeńskie nadane dzieciom w Polsce w 2019 r. wg województw - imię pierwsze\r\nexport const getCountFor2019InMalopolska = (name, gender) => {\r\n    let womanResourceId = 21451;\r\n    let manResourceId = 21449;\r\n    const req = {\r\n        voivodeshipNumCol: 'col1',\r\n        voivodeshipCol: 'col2',\r\n        nameCol: 'col3',\r\n        countCol: 'col5'\r\n    }\r\n    const malopolskaNum = 12;\r\n\r\n    const query = `${req.nameCol}:%22${name.toUpperCase()}%22%20AND%20${req.voivodeshipNumCol}:${malopolskaNum}`;\r\n    const womanUrl = `${dataGovURL}/resources/${womanResourceId}/data?page=1&per_page=100&q=${query}&sort=`;\r\n    const manUrl = `${dataGovURL}/resources/${manResourceId}/data?page=1&per_page=100&q=${query}&sort=`;\r\n    const headers = {\r\n        'X-API-VERSION': '1.4',\r\n        'Content-Type': 'application/json'\r\n    };\r\n    return axios.get(gender === 'K' ? womanUrl : manUrl, {headers})\r\n        .then(response => mapResponseToData(response, req, name))\r\n        .then(data => {\r\n            if (data) {\r\n                return data;\r\n            }\r\n            return {\r\n                name: name.toUpperCase(),\r\n                count: 0\r\n            };\r\n        });\r\n}\r\n\r\nconst mapResponseToData = (response, req, name) => {\r\n    const data = response.data.data.map(data => {\r\n        return {\r\n            name: data.attributes[req.nameCol],\r\n            count: data.attributes[req.countCol]\r\n        }\r\n    })\r\n        .filter(data => data.name === name.toUpperCase());\r\n    return data.length ? data[0] : null;\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport {getCountFor2019InMalopolska, getCountForYears2000To2019} from \"../../service/DataService\";\r\nimport \"./NamesStats.css\"\r\nimport LineChart from \"../chart/LineChart\";\r\nimport BarChart from \"../chart/BarChart\";\r\nimport {Button, FormControl, InputGroup} from \"react-bootstrap\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport {Plus, Trash} from \"react-bootstrap-icons\";\r\n\r\nconst createArrayFromRange = (start, end) => {\r\n    return Array.from({length: end - start + 1}, (v, k) => k + start)\r\n}\r\n\r\nconst colorList = [\r\n    'rgb(0,35,255)',\r\n    'rgb(0,255,0)',\r\n    'rgb(253,220,0)',\r\n    'rgb(255,0,0)',\r\n    'rgb(0, 255, 255)',\r\n    'rgb(187,0,255)',\r\n    'rgb(200,130,123)',\r\n    'rgb(36,32,32)',\r\n    'rgb(38,75,102)',\r\n    'rgb(255,99,132)',\r\n    'rgb(58,96,9)',\r\n    'rgb(105,176,176)',\r\n    'rgb(255,150,2)',\r\n    'rgb(47,1,72)',\r\n    'rgb(140,135,135)'];\r\n\r\nconst getRandomColor = (i) => {\r\n    if (i < 15) {\r\n        return colorList[i];\r\n    }\r\n    return '#' + Math.floor(Math.random() * 16777215).toString(16);\r\n}\r\n\r\nconst NamesStats = () => {\r\n    const [loadingYears, setLoadingYears] = useState(false);\r\n    const [loadingVoivodeship, setLoadingVoivodeship] = useState(false);\r\n    const [yearRanges] = useState(createArrayFromRange(2000, 2019));\r\n    const [inputName, setInputName] = useState('');\r\n    const [gender, setGender] = useState('K');\r\n    const [lineChartData, setLineChartData] = useState({\r\n        labels: yearRanges,\r\n        datasets: []\r\n    });\r\n    const [barChartData, setBarChartData] = useState({\r\n        labels: [],\r\n        datasets: [{\r\n            data: [],\r\n            borderColor: colorList[0],\r\n            backgroundColor: colorList[0]\r\n        }]\r\n    });\r\n\r\n    const addNameHandler = () => {\r\n        if (inputName) {\r\n            addName(inputName, gender);\r\n            setInputName('');\r\n        }\r\n    }\r\n\r\n    const clearHandler = () => {\r\n        setLineChartData({\r\n            labels: yearRanges,\r\n            datasets: []\r\n        });\r\n        setBarChartData({\r\n            labels: [],\r\n            datasets: [{\r\n                data: [],\r\n                borderColor: colorList[0],\r\n                backgroundColor: colorList[0]\r\n            }]\r\n        });\r\n    }\r\n\r\n    const addName = (newName, gender) => {\r\n        const color = getRandomColor(lineChartData.datasets.length);\r\n        setLoadingYears(true);\r\n        setLoadingVoivodeship(true);\r\n        getCountForYears2000To2019(newName.trim(), gender)\r\n            .then(data => {\r\n                const yearsData = createYearsData(newName, data, color)\r\n                setLineChartData({\r\n                    ...lineChartData,\r\n                    datasets: [...lineChartData.datasets, yearsData]\r\n                });\r\n                setLoadingYears(false);\r\n            })\r\n            .catch(() => setLoadingYears(false));\r\n        getCountFor2019InMalopolska(newName.trim(), gender)\r\n            .then(data => {\r\n                if (data) {\r\n                    const barChartLabels = [...barChartData.labels, data.name.toUpperCase()]\r\n                    const barChartDataset = {...barChartData.datasets[0]}\r\n                    barChartDataset.data = [...barChartDataset.data, data.count];\r\n                    setBarChartData({...barChartData, labels: barChartLabels, datasets: [barChartDataset]})\r\n                }\r\n                setLoadingVoivodeship(false);\r\n            })\r\n            .catch(() => setLoadingVoivodeship(false));\r\n\r\n    }\r\n\r\n\r\n    const createYearsData = (name, stats, color) => {\r\n        return {\r\n            label: name.toUpperCase(),\r\n            data: extractCountData(stats),\r\n            fill: false,\r\n            borderColor: color,\r\n            backgroundColor: color\r\n        };\r\n    }\r\n\r\n    const extractCountData = stats => {\r\n        return yearRanges.map(year => {\r\n            let extractedStat = stats.find(stat => stat.year === year);\r\n            return extractedStat != null ? extractedStat.count : 0;\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={'NameStats'}>\r\n            <div className={'input-container'} l>\r\n                <InputGroup className={'inputs p-2'}>\r\n                    <FormControl className={'col-4 mr-3'}\r\n                                 value={inputName}\r\n                                 onChange={(event) => setInputName(event.target.value)}\r\n                                 placeholder={'Imię'}\r\n                    />\r\n                    <FormControl className={'col-4 mr-3'} as=\"select\" value={gender}\r\n                                 onChange={event => setGender(event.target.value)}>\r\n                        <option value={'K'}>Kobieta</option>\r\n                        <option value={'M'}>Mężczyzna</option>\r\n                    </FormControl>\r\n                    <Button className={'col-2 mr-2'} onClick={addNameHandler}\r\n                            disabled={loadingYears || loadingVoivodeship}>\r\n                        {loadingYears || loadingVoivodeship ? <Spinner animation={'border'} size={'sm'}/> :\r\n                            <Plus size={25}/>}\r\n                    </Button>\r\n                    <Button className={'col-2'} onClick={clearHandler} variant={\"danger\"}>\r\n                        <Trash size={25}/>\r\n                    </Button>\r\n                </InputGroup>\r\n                <hr className={'mt-0 mb-0'} l/>\r\n            </div>\r\n            <div className={'chart-container'}>\r\n                {lineChartData.datasets.length ?\r\n                    <LineChart data={lineChartData} title={'Imiona w latach 2000-2019'}/> : null}\r\n                {barChartData.labels.length ?\r\n                    <BarChart data={barChartData} title={'Województwo Małopolskie 2019'}/> : null}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NamesStats;","import React from 'react';\nimport './App.css';\nimport NamesStats from \"./components/names-stats/NamesStats\";\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <NamesStats/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}