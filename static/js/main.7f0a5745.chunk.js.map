{"version":3,"sources":["service/dataService.js","components/chart/MyChart.js","components/names-stats/NamesStats.js","App.js","serviceWorker.js","index.js"],"names":["fullUrl","getCountForYears2000To2019","name","req","axios","get","toUpperCase","headers","then","response","data","map","attributes","year","count","filter","getCountFor2019InMalopolska","voivodeshipNumCol","voivodeshipCol","nameCol","countCol","query","womanUrl","manUrl","mapResponseToData","length","MyChart","props","useState","width","setWidth","React","useMemo","axes","primary","type","position","series","showPoints","tooltip","align","anchor","useEffect","setTimeout","style","height","NamesStats","inputName","setInputName","yearsSeries","setYearsSeries","label","voivodeshipSeries","setVoivodeshipSeries","addName","newName","trim","createYearsSeries","temp","stats","stat","value","onChange","event","target","onClick","display","flexDirection","justifyContent","flexWrap","textTransform","alignItems","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f0a5745.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst proxyInUse = false;\r\nconst fullUrl = 'https://api.dane.gov.pl';\r\n\r\n// Imiona nadane dzieciom w Polsce w latach 2000-2019 - imię pierwsze\r\nexport const getCountForYears2000To2019 = (name) => {\r\n    const req = {\r\n        resourcesId: 21457,\r\n        nameCol: 'col2',\r\n        yearCol: 'col1',\r\n        countCol: 'col3'\r\n    }\r\n    const headers = {\r\n        'X-API-VERSION': '1.4',\r\n        'Content-Type': 'application/json'\r\n    };\r\n\r\n    return axios.get(`${proxyInUse ? '' : fullUrl}/resources/${req.resourcesId}/data?page=1&per_page=100&q=${req.nameCol}:%22${name.toUpperCase()}%22&sort=`, {headers})\r\n        .then(response =>\r\n            response.data.data.map(data => {\r\n                return {\r\n                    name: data.attributes[req.nameCol],\r\n                    year: data.attributes[req.yearCol],\r\n                    count: data.attributes[req.countCol]\r\n                }\r\n            })\r\n                .filter(data => data.name === name.toUpperCase()))\r\n        ;\r\n}\r\n\r\n// Imiona żeńskie nadane dzieciom w Polsce w 2019 r. wg województw - imię pierwsze\r\nexport const getCountFor2019InMalopolska = (name) => {\r\n    let womanResourceId = 21451;\r\n    let manResourceId = 21449;\r\n    const req = {\r\n        voivodeshipNumCol: 'col1',\r\n        voivodeshipCol: 'col2',\r\n        nameCol: 'col3',\r\n        countCol: 'col5'\r\n    }\r\n    const malopolskaNum = 12;\r\n\r\n    const query = `${req.nameCol}:%22${name.toUpperCase()}%22%20AND%20${req.voivodeshipNumCol}:${malopolskaNum}`;\r\n    const womanUrl = `${proxyInUse ? '' : fullUrl}/resources/${womanResourceId}/data?page=1&per_page=100&q=${query}&sort=`;\r\n    const manUrl = `${proxyInUse ? '' : fullUrl}/resources/${manResourceId}/data?page=1&per_page=100&q=${query}&sort=`;\r\n    const headers = {\r\n        'X-API-VERSION': '1.4',\r\n        'Content-Type': 'application/json'\r\n    };\r\n    return axios.get(womanUrl, {headers})\r\n        .then(response => mapResponseToData(response, req, name))\r\n        .then(data => {\r\n            if (data && data.name && data.count) {\r\n                return data;\r\n            }\r\n            return axios.get(manUrl, {headers})\r\n                .then(response => mapResponseToData(response, req, name));\r\n        });\r\n}\r\n\r\nconst mapResponseToData = (response, req, name) => {\r\n    const data = response.data.data.map(data => {\r\n        return {\r\n            name: data.attributes[req.nameCol],\r\n            count: data.attributes[req.countCol]\r\n        }\r\n    })\r\n        .filter(data => data.name === name.toUpperCase());\r\n    return data.length ? data[0] : data;\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Chart} from 'react-charts'\r\n\r\nconst MyChart = props => {\r\n    const initialWidth = 99;\r\n    const [width, setWidth] = useState(initialWidth);\r\n    const data = React.useMemo(() => props.data, [props.data]);\r\n    const axes = React.useMemo(\r\n        () => [\r\n            {primary: true, type: 'ordinal', position: 'bottom'},\r\n            {type: 'linear', position: 'left'}\r\n        ],\r\n        []\r\n    )\r\n\r\n    const series = React.useMemo(\r\n        () => ({\r\n            showPoints: true,\r\n            type: props.type\r\n        }),\r\n        [props.type]\r\n    )\r\n\r\n    const tooltip = React.useMemo(\r\n        () => ({\r\n            align: 'top',\r\n            anchor: 'gridRight'\r\n        }),\r\n        []\r\n    )\r\n\r\n    useEffect(() => {setTimeout(() => {\r\n        setWidth(width === initialWidth ? width + 1 : width - 1)\r\n    }, 2000)}, [props.data]);\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                width: width + '%',\r\n                height: '400px',\r\n            }}\r\n        >\r\n            <Chart data={data} axes={axes} series={series} tooltip={tooltip}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyChart;","import React, {useEffect, useState} from \"react\";\r\nimport {getCountFor2019InMalopolska, getCountForYears2000To2019} from \"../../service/dataService\";\r\nimport MyChart from \"../chart/MyChart\";\r\nimport \"./NamesStats.css\"\r\n\r\nconst NamesStats = () => {\r\n    const initData = false;\r\n    let [inputName, setInputName] = useState('');\r\n    let [yearsSeries, setYearsSeries] = useState([]);\r\n    // let [voivodeshipSeries, setVoivodeshipSeries] = useState({label: 'Voivodeship Series', data: []});\r\n    let [voivodeshipSeries, setVoivodeshipSeries] = useState({label: 'Voivodeship Series', data: []});\r\n\r\n    const addNameHandler = () => {\r\n        if (inputName) {\r\n            addName(inputName);\r\n            setInputName('');\r\n        }\r\n    }\r\n\r\n    const addName = (newName) => {\r\n        getCountForYears2000To2019(newName.trim())\r\n            .then(data => {\r\n                const series = createYearsSeries(newName, data)\r\n\r\n                setYearsSeries([...yearsSeries, series]);\r\n            });\r\n        getCountFor2019InMalopolska(newName.trim())\r\n            .then(data => {\r\n                if (data && data.name && data.count) {\r\n                    const temp = {...voivodeshipSeries}\r\n                    temp.data = [...voivodeshipSeries.data, [data.name, data.count]];\r\n                    setVoivodeshipSeries(temp);\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (initData) {\r\n            const names = [\r\n                'Lidia',\r\n                'Joanna',\r\n                'Anna',\r\n                'Hanna',\r\n                'Karolina',\r\n                // 'Julia',\r\n                'Malwina',\r\n                'Ewa',\r\n                'Alicja',\r\n                'Alina'];\r\n            Promise.all(names.map(name => getCountForYears2000To2019(name)))\r\n                .then(result => Promise.all(result.map(data => createYearsSeries(data[0].name, data))))\r\n                .then(series => setYearsSeries(series));\r\n            Promise.all(names.map(name => getCountFor2019InMalopolska(name)))\r\n                .then(result => Promise.all(result.reduce((sum, current) => sum.concat([[current.name, current.count]]), [])))\r\n                .then(allSeries => {\r\n                    const temp = {...voivodeshipSeries}\r\n                    temp.data = [...allSeries];\r\n                    setVoivodeshipSeries(temp);\r\n                })\r\n        }\r\n    }, []);\r\n\r\n\r\n    const createYearsSeries = (name, stats) => {\r\n        return {\r\n            label: name,\r\n            data: stats.map((stat) => [stat.year, stat.count])\r\n        };\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input value={inputName} onChange={(event) => setInputName(event.target.value)}/>\r\n            <button onClick={addNameHandler}> Add Name</button>\r\n            <br/>\r\n            <hr/>\r\n            <div style={{\r\n                display: \"flex\",\r\n                flexDirection: 'row',\r\n                justifyContent: 'space-evenly',\r\n                flexWrap: 'wrap'\r\n            }}>\r\n                <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    width: '80%'\r\n                }}>\r\n                    <h1 style={{\r\n                        textTransform: \"capitalize\"\r\n                    // }}>Years</h1>\r\n                    }}>Imiona w latach 2000-2019</h1>\r\n                    <MyChart data={yearsSeries} type={'line'}/>\r\n                </div>\r\n                <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    alignItems: 'center',\r\n                    width: '80%'\r\n                }}>\r\n                    <h1 style={{\r\n                        textTransform: \"capitalize\"\r\n                    // }}>Voivodeship (malopolska) 2019</h1>\r\n                    }}>Województwo Małopolskie 2019</h1>\r\n                    <MyChart data={[voivodeshipSeries]} type={'bar'}/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NamesStats;","import React from 'react';\nimport './App.css';\nimport NamesStats from \"./components/names-stats/NamesStats\";\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <NamesStats/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}